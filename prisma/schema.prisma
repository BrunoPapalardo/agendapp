// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  telephone   String
  password    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  appointments Appointment[]
}

model Appointment {
  id          Int      @id @default(autoincrement())
  dateTime    DateTime
  userId      Int
  employeeId  Int
  businessId  Int
  productId   Int

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime   @default(now())

  businesses Business[]
}

model Business {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  categoryId  Int
  createdAt   DateTime  @default(now())

  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  employees   Employee[]
  products    Product[]
  appointments Appointment[]
}

model Employee {
  id         Int       @id @default(autoincrement())
  name       String
  businessId Int

  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  businessId  Int

  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}