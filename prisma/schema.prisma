// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  telephone String // Mudado para String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?

  appointments Appointment[]
  companyRoles CompanyUserRole[]
}

model Appointment {
  id         Int       @id @default(autoincrement())
  dateTime   DateTime?
  userId     Int
  employeeId Int
  companyId  Int
  serviceId  Int       @default(0)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: SetNull)
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  icon      String
  createdAt DateTime @default(now())

  companyes Company[]
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  code        String   @unique
  address     String
  categoryId  Int
  image       String?
  createdAt   DateTime @default(now())
  telephone   String   @default("0") // Mudado para String
  ispublic    Int      @default(0)
  cnpj        String? // Mudado para String
  email       String?
  instagram   String?
  whatsapp    String? // Mudado para String
  coordinates String?

  category      Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  companyUsers  CompanyUserRole[]
  employees     Employee[]
  services      Service[]
  appointments  Appointment[]
  businessHours BusinessHours[]
}

model Employee {
  id        Int    @id @default(autoincrement())
  name      String
  companyId Int
  image     String

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Service {
  id        Int    @id @default(autoincrement())
  name      String
  companyId Int
  image     String
  price     Float
  duration  Int

  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model CompanyUserRole {
  id        Int    @id @default(autoincrement())
  userId    Int
  companyId Int
  role      String @default("employee") // "admin", "editor", "viewer"

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId]) // Um usuário só pode ter um vínculo por empresa
}

model BusinessHours {
  id        Int     @id @default(autoincrement())
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  dayOfWeek Int // 0 = Domingo, 1 = Segunda, ..., 6 = Sábado
  startTime String // Ex: "08:00"
  endTime   String // Ex: "12:00"
  isClosed  Boolean @default(false)
}
